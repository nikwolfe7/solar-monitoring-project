[http://code.google.com/p/solar-monitoring-project/ Back to Main Page]

== Strategies for Implementation ==

This page is a general recording of various issues and divergent paths that arise in the process of deciding how to ultimately implement this project. The discussions are listed here in no particular order. If something becomes enough of an issue, I'll make a dedicated wiki page for it.

===Topics On This Page===

  * [ImplementationIdeas#What_Hardware_to_Use? What Hardware to Use]
  * [ImplementationIdeas#Discussion:_Push_or_Pull Discussion: Push or Pull]
  * [ImplementationIdeas#Discussion:_Necessary_or_Sufficient_Controls Discussion: Necessary or Sufficient Controls]

----

==What Hardware to Use?==

As [Requirements required] by my specifications, the hardware component of this system needs to be designed with parts that are essentially generic. I do not intend to use any functionality that can only be obtained through the use of a specific microprocessor and I want this project to be replicable anywhere in the world.

===Open-Source Hardware===

The Italian hardware company [http://www.arduino.cc/ Arduino] designs microprocessor boards and provides complete part listings and schematic documentation. As stated on their website:

  _"Arduino is an open-source electronics prototyping platform based on flexible, easy-to-use hardware and software. It's intended for artists, designers, hobbyists, and anyone interested in creating interactive objects or environments."_ 

This is a pretty excellent fit for this project, and that is why I have purchased an Arduino [http://arduino.cc/en/Main/ArduinoBoardDuemilanove Duemilanove].

<img src="http://arduino.cc/en/uploads/Main/ArduinoDuemilanove.jpg" alt="Arduino Duemilanove" />

I really like this board. The open-source IDE they provide is incredibly easy to use, and is based on the [http://processing.org/reference/ Processing] language. I was able to get this thing to play a song through a Piezo speaker within 30 minutes of opening the box. Furthermore, the price is right. This gem only costs $30 assembled, and would be much less if you ordered the parts and [http://arduino.cc/en/uploads/Main/arduino-duemilanove-schematic.pdf built] it yourself. The processor, for instance, an [http://www.sparkfun.com/commerce/product_info.php?products_id=9217 ATmega328], is a whopping $5 bucks online from [http://www.sparkfun.com/commerce/categories.php Sparkfun].

===Hack a Phone vs. Use GSM Chip===

GSM chips are $100 bucks flat, and are only really sold by themselves without a phone by [http://www.telit.com/ Telit]. This violates the [Requirements requirement] that I design this system without using any company-specific or non-generic hardware. I have opted instead to buy a disposable cell phone for $15 and hack it. Details to follow... 

----

==Discussion: Push or Pull==

There are actually two different ways to accomplish the task of initializing the data transfer from the solar array site to the remote server. 

===Push Model===

The idea of a "push" in this case is the initialization of a data transfer from the solar site itself. The microcontroller interfacing with the solar controller will, at a time of its own choosing, call up the server and complete a data transfer. In this case the remote server simply "waits" for the solar site to send it data. 

*Advantages:* If an emergency triggers an event at the site, system overseers can be notified immediately. It might be easier to minimize power usage if the decision of when to transmit data is in the hands of the transmitter.

*Disadvantages:* Because there is no phone number for an IP address, a cellular transmitter would need to call a modem with a phone number that would then deposit the information on the server. This requires another piece of hardware, and that we have physical access to the server. This violates the [Requirements requirement] that the software system be able to run anywhere. It's also more expensive and completely unnecessary given the fact that VoIP services can call cell phones directly with just an internet connection from the perspective of the client. The exchange between the ISP and the cellular network is for all intensive purposes hidden from the client in this case. 

The disadvantages of the pull system are a deal-breaker, in my opinion.

===Pull Model===

The idea of a "pull" model in this case is the initialization of a data transfer from the remote server. The server would initiate a call to the solar site at predefined intervals and "ask" for information. In this case, the hardware component simply waits to be called. 

*Advantages:* The remote server will simply use VoIP services to call the transmitter, and so no further hardware beyond what is contained at the solar site is required. Inquiries can also be initiated at will in this case. 

*Disadvantages:* We need to pay for VoIP services. (Of course, paying for a modem to listen for data requires another cellular account for the SIM card/phone number so this is not exactly a drawback, other than the fact that communication costs money.) Also, we will not know about failures until we initiate a data transfer and get a response from the site. This can lead to lapses during which time solar battery depletion can occur. 

I think the pull model wins on the merits that it is cheaper and allows us to run the software for this system anywhere, as called for by the [Requirements requirements] of this project.

===Final Decision===

Pull Model.

----

==Discussion: Necessary or Sufficient Controls==

This is an issue that I need to elaborate in words, because it has become an increasingly frustrating aspect of my implementation: Why can't I connect the power button control circuit to the same circuitry as the rest of the button controls?

This takes a little description, and at least one picture:

<img src="http://solar-monitoring-project.googlecode.com/svn/img/th_keypad.png" alt="image" width="90%" height="90%"/>

This image is of the keypad nodes on the motherboard of a Motorola W260g. Any button on this keypad can be pressed by connecting a circuit across the outer and inner circular leads. The nodes are important because the keys are arranged as a grid:

_Buttons Pressed After Connecting Nodes:_

||        || Node A || Node B || Node C || Node D ||
|| Node 1 ||   1    ||    4   ||   7    ||   `*`  ||
|| Node 2 ||   2    ||    5   ||   8    ||   0    ||
|| Node 3 ||   3    ||    6   ||   9    ||   #    ||

Thus with only 7 connections, any key can be pressed on the DTMF keypad. A few other items of information must be noted here:
  * An incoming call can be connected by completing a circuit across "Node 1" and the node annotated as "On / Accept". 
  * The power button is pressed by completing a circuit across the lead labeled "Power" and the "Ground" node. 
  * The outer edge of the keypad is ground.

These buttons can be connected electronically using a [http://en.wikipedia.org/wiki/Three-state_logic tri-state buffer] where the nodes to be connected are the input and output of the buffer and a control signal (from, say, a microprocessor) is the enable. So, you can press any button on the keypad electronically without mechanical energy (i.e. pushing a button).

<img src="http://www.geocities.com/SiliconValley/2072/3statbuf.gif" alt="tri-state buffer" />

There are issues with this, however. [http://www.datasheetcatalog.org/datasheet/philips/74HC_HCT125_CNV_2.pdf Tri-state buffer chips] require power and ground, and in order to connect the power button, you need to ensure that the ground on the buffer chip is connected to the same ground as the cell phone. The problem that arises is the fact that connecting any of the keypad buttons through the same circuit results in Nodes 1-3 being drawn to ground. Consequentially, when you connect ANY key on the keypad, only a 1, 2, or 3 registers. Nodes 1, 2, and 3 MUST be connected to Nodes A, B, C, and D in order for all of the keys (0-9,`*`,#) to register. If the ground of the circuitry used to electronically connect these nodes is also connected to the ground of the cell phone (as required by the circuitry to connect the "Power" button), the keypad is rendered useless.

Oddly, all of the keypad's functionality is sacrificed in the interest of electronically connecting the power button. 

=== Question: Why Do We Need The Power Button? ===

After trying in vain to resolve this problem for more days than I care to admit, I realized yet another consequence of using a [ImplementationIdeas#Discussion:_Push_or_Pull pull] model for this system. If the cell phone is passively waiting for a call at all times, why would you ever want to turn it off?